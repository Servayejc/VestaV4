<!DOCTYPE html>
<html>
	<meta charset="UTF-8"> 
	<style>
		.c3 svg{font:10px sans-serif;-webkit-tap-highlight-color:transparent}.c3 line,.c3 path{fill:none;stroke:#000}.c3 text{-webkit-user-select:none;-moz-user-select:none;user-select:none}.c3-bars path,.c3-event-rect,.c3-legend-item-tile,.c3-xgrid-focus,.c3-ygrid{shape-rendering:crispEdges}.c3-chart-arc path{stroke:#fff}.c3-chart-arc text{fill:#fff;font-size:13px}.c3-grid line{stroke:#aaa}.c3-grid text{fill:#aaa}.c3-xgrid,.c3-ygrid{stroke-dasharray:3 3}.c3-text.c3-empty{fill:grey;font-size:2em}.c3-line{stroke-width:1px}.c3-circle._expanded_{stroke-width:1px;stroke:#fff}.c3-selected-circle{fill:#fff;stroke-width:2px}.c3-bar{stroke-width:0}.c3-bar._expanded_{fill-opacity:1;fill-opacity:.75}.c3-target.c3-focused{opacity:1}.c3-target.c3-focused path.c3-line,.c3-target.c3-focused path.c3-step{stroke-width:2px}.c3-target.c3-defocused{opacity:.3!important}.c3-region{fill:#4682b4;fill-opacity:.1}.c3-brush .extent{fill-opacity:.1}.c3-legend-item{font-size:12px}.c3-legend-item-hidden{opacity:.15}.c3-legend-background{opacity:.75;fill:#fff;stroke:#d3d3d3;stroke-width:1}.c3-title{font:14px sans-serif}.c3-tooltip-container{z-index:10}.c3-tooltip{border-collapse:collapse;border-spacing:0;background-color:#fff;empty-cells:show;-webkit-box-shadow:7px 7px 12px -9px #777;-moz-box-shadow:7px 7px 12px -9px #777;box-shadow:7px 7px 12px -9px #777;opacity:.9}.c3-tooltip tr{border:1px solid #ccc}.c3-tooltip th{background-color:#aaa;font-size:14px;padding:2px 5px;text-align:left;color:#fff}.c3-tooltip td{font-size:13px;padding:3px 6px;background-color:#fff;border-left:1px dotted #999}.c3-tooltip td>span{display:inline-block;width:10px;height:10px;margin-right:6px}.c3-tooltip td.value{text-align:right}.c3-area{stroke-width:0;opacity:.2}.c3-chart-arcs-title{dominant-baseline:middle;font-size:1.3em}.c3-chart-arcs .c3-chart-arcs-background{fill:#e0e0e0;stroke:none}.c3-chart-arcs .c3-chart-arcs-gauge-unit{fill:#000;font-size:16px}.c3-chart-arcs .c3-chart-arcs-gauge-max{fill:#777}.c3-chart-arcs .c3-chart-arcs-gauge-min{fill:#777}.c3-chart-arc .c3-gauge-value{fill:#000}.c3-chart-arc.c3-target g path{opacity:1}.c3-chart-arc.c3-target.c3-focused g path{opacity:1}
		p {font:12px sans-serif;}
		H3 {font:24px sans-serif;}
}
	</style>
 
	<head>
		<meta http-equiv= "Content-Type" content="text/html;charset=utf-8">
		<link rel="stylesheet" type="text/css" href="https://cdn.rawgit.com/dubrox/Multiple-Dates-Picker-for-jQuery-UI/master/jquery-ui.multidatespicker.css">
		<link rel="stylesheet" type="text/css" href="https://code.jquery.com/ui/1.12.1/themes/pepper-grinder/jquery-ui.css">
		<script src="https://sdk.amazonaws.com/js/aws-sdk-2.187.0.min.js"></script>
		<script src="https://code.jquery.com/jquery-2.2.4.js"integrity="sha256-iT6Q9iMJYuQiMWNd9lDyBUStIq/8PuOW33aOqmvFpqI="crossorigin="anonymous"></script>
		<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"></script>
		<script src="https://cdn.rawgit.com/dubrox/Multiple-Dates-Picker-for-jQuery-UI/master/jquery-ui.multidatespicker.js"></script>
		<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.6/d3.min.js"></script>
		<script src="https://cdnjs.cloudflare.com/ajax/libs/c3/0.4.10/c3.min.js"></script>
		<script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script>

 <script>


	
	var Cols = [];
	var items = {names:{}};
	var Names = [];
	
	var f = d3.format(".2f");
	
	var chart;		

	var names = [];
	
	var urls = [
		'',  //http://192.168.0.20/getsensors',
		''  //  computed from calendar date(s)
	];

	function pad(n, width, z) {
		z = z || '0';
		n = n + '';
		return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;
	}
	
	function localTime(x) {
		d = new Date(x);
		nd = new Date(d.getTime() - (d.getTimezoneOffset() * 60 * 1000));
		return( nd.getFullYear()+'-'+pad(nd.getMonth()+1,2)+'-'+pad(nd.getDate(),2)+' '+pad(nd.getHours(),2)+':'+pad(nd.getMinutes(),2));
	}
	
	if (!Date.prototype.toISOString) {
		(function() {
			Date.prototype.toISOString = function() {
			return this.getUTCFullYear() +
				'-' + pad(this.getUTCMonth() + 1,2) +
				'-' + pad(this.getUTCDate(),2) +
				'T' + pad(this.getUTCHours(),2) +
				':' + pad(this.getUTCMinutes(),2) +
				':' + pad(this.getUTCSeconds(),2) +
				'.' + (this.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) +
				'Z';
		};
	  });
	}

	Date.prototype.addDays = function(days) {
	  this.setDate(this.getDate() + parseInt(days));
	  return this;
	};

	Date.prototype.addHours = function(hours) {
	  this.setHours(this.getHours() - hours);
	  return this;
	};

	function UTC(localDate){
		d = new Date(localDate);
		return(d.toISOString().substring(0,16));
	};

		
	//{"Sensors":[{"N":0,"C":1,"P":0,"DSC":"Salon","A":"2823BF390A000060"},{"N":1,"C":"2","P":0,"DSC":"Sous-sol","A":"28BC034D030000B3"},{"N":2,"C":0,"P":0,"DSC":"Exterieur","A":"28FF9FC3C017024C"},{"N":3,"C":"0","P":0,"DSC":"Foyer","A":"2827BE54030000F2"},{"N":4,"C":"3","P":0,"DSC":"Ch 3","A":"285FCA54030000B9"},{"N":5,"C":"4","P":0,"DSC":"SDB Haut","A":"2844CA540300001A"},{"N":6,"C":"0","P":1,"DSC":"Piscine","A":"2823BF390A000066"},{"N":7,"C":"0","P":"0","DSC":"New","A":"289C139705000082"}]}	
	
	function prepareChart(json) {
		//alert('prepare');
		names.push({});    
		for (const element of json.Sensors) {
			for (i = 0; i < json.Sensors.length; i++) {  
				id = 'T_'+ json.Sensors[i].N;
				if (!(id in items.names)) {
					objName = id;
					objValue = json.Sensors[i].DSC;
					items.names[objName] = objValue;
					Cols.push(id);
					Names.push(objValue);	
				}
			}	
		}
		//alert(JSON.stringify(items.names));
		//alert(Cols);
		//alert(Names); //not used
	}	

		
	function generateChart(json) {	
		var quarter = document.getElementById('quarter').checked;
		var farenheit = document.getElementById('CF').checked;
		dispData = json.Data;
		//alert(JSON.stringify(json));
		// generate chart
		chart = c3.generate({
			bindto: document.getElementById('chart'),
			size: {
				height: 600
			},
			padding: {
				left: 100,
				right: 100
			},
			data: {
				xFormat: '%Y-%m-%dT%H:%M:%S',
				json: dispData,
				keys: {
					x: 'UID',
					value: Cols
				},
				names:  items.names,
				type: 'spline'
			},
			grid:{
				x: {
						show: false
					},
				y: {
						show: true
					} 	
				},	
		axis : {
		y : {
			tick: {
			format: function (d) { 
				if (false){
						return d +"°F"; 
					}
					else
					{
						return d +"°C"; 
					};
				}
			}
		},						  
		x:{
			type : "timeseries",
				tick: {
				format: function (x) {return(localTime(x));},
				rotate: 60
				}			
			}
		},
		tooltip:{
			format: { 
				value: function(v){
					if (farenheit){		
						return f(v)+ " &deg;F";
					}
					{
					return f(v)+ " &deg;C";
				}	
			}
		}
		}
		});  
	}

	//https://medium.com/@wisecobbler/using-the-javascript-fetch-api-f92c756340f0

	function fetchAll(){
	
		
		var getNames = fetch(urls[0])
			.then (function(resp){
				return resp.json().then(function(json){
				if (json){ 
					return(json);
					}							
				});
			})
			.catch(function(error) {
			});
								
		var getData = fetch(urls[1])
			.then (function(resp){
				return resp.json().then(function(json){
				if (json){ 
					return(json);
					}							
				});
			})
			.catch(function(error) {
			});
		var combinedData = {"Names":{},"Data":{}};	
		Promise.all([getNames,getData]).then(function(values){
			combinedData["Names"] = values[0];
			combinedData["Values"] = values[1];
			prepareChart(values[0]);
		    generateChart(values[1]);
			return combinedData;
		});
	}
	
	
	function update() {
		//alert(urls[0]);
		//alert(urls[1]);
		combinedData = fetchAll();
	}
	
	window.onload=function(){


		var quarter = document.getElementById('quarter').checked;
		var farenheit = document.getElementById('CF').checked;
	    nd = new Date();
		var x = window.location.href;
		var y = x.substr(0, x.lastIndexOf('/'));
		fileName = pad(nd.getMonth()+1,2)+pad(nd.getDate(),2)+'.jsn';
		
		urls[0] = y + '/getsensors';
		urls[1] = y + '/getlogdata?FN=';
		urls[1] += pad(nd.getMonth()+1,2)+pad(nd.getDate(),2);
		// by default, show current day
	
		update();

		$('#mdp').multiDatesPicker({
			dateFormat: "yy-mm-dd",
			maxPicks: 1,
			maxDate: 0,
			onClose: function() {
				var dates = $("#mdp").multiDatesPicker('getDates');
				if ((dates.length == 1)) {
					urls[1] = y + '/getlogdata?FN=';
					urls[1]+= dates[0].substring(5, 7);
					urls[1]+= dates[0].substring(8, 10);
					update();
				}
			}
		});
		
	}
	

	</script>
	</head>

	<body>
		<center><H3> Températures </H3></center>
 		<p>Sélectionnez une ou deux dates: <input type="text"  width="150" id="mdp"> 
			
			<button type="button">Go!</button><br>
			<input type="checkbox" id="quarter" onclick="update()">15 min 
			<input type="checkbox" id="CF" onclick="update()">F				
		</p>
		<div id="chart"></div>
		<div id="json"></div>
	</body>	
</html>

